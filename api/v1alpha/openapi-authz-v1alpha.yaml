openapi: 3.0.1
info:
  title: CIAM Authz
  description: This is the CIAM-Authz service based on the OpenAPI 2.0 specification.
  contact:
    email: ciam-authz@redhat.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: version not set
servers:
- url: /
tags:
- name: CheckPermission
- name: LicenseService
- name: ImportService
- name: AuthZ
  description: Everything about your AuthZ
  externalDocs:
    description: CIAM AuthZ
    url: http://<TODO>
- name: user
  description: Operations about user
paths:
  /v1alpha/check:
    post:
      tags:
      - CheckPermission
      summary: Checks the permission and returns allowed (true) or not allowed (false)
      description: CheckPermission endpoint is used by the clients to determine if
        the given "subject" has the given permission "Operation" on a given "Resource"
      operationId: CheckPermission_CheckPermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1alphaCheckPermissionRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alphaCheckPermissionResponse'
              example:
                description: ""
                result: true
        "401":
          description: Returned when no valid identity information provided to a protected
            endpoint.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Returned when an unexpected error occurs during request processing.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1alpha/orgs/{orgId}/entitlements/{serviceId}:
    post:
      tags:
      - LicenseService
      summary: Entitle an Org access through a seat based license for a service.
      description: |
        Grants a given Org a seat based license to a given service. A maximum number of entitled seats
      operationId: LicenseService_EntitleOrg
      parameters:
      - name: orgId
        in: path
        description: the ID of an org to entitle
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: serviceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitleOrgRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alphaEntitleOrgResponse'
        "401":
          description: Returned when no valid identity information provided to a protected
            endpoint.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Returned when an unexpected error occurs during request processing.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1alpha/orgs/{orgId}/import:
    post:
      tags:
      - ImportService
      operationId: ImportService_ImportOrg
      parameters:
      - name: orgId
        in: path
        description: the ID of an org to import
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              title: ImportOrgRequest to trigger an import for an orgs users into
                spicedb
              type: object
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alphaImportOrgResponse'
        "401":
          description: Returned when no valid identity information provided to a protected
            endpoint.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Returned when an unexpected error occurs during request processing.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1alpha/orgs/{orgId}/licenses/{serviceId}:
    get:
      tags:
      - LicenseService
      summary: Summarize a license.
      description: |
        Returns information about the license,  including the number of entitled seats (maximum assignable) and the current number of available seats.
      operationId: LicenseService_GetLicense
      parameters:
      - name: orgId
        in: path
        description: The id of an license-able organization.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: serviceId
        in: path
        description: A "serviceId" is an arbitrary identifier for a service with limited
          access that may be granted to an organization.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alphaGetLicenseResponse'
        "401":
          description: Returned when no valid identity information provided to a protected
            endpoint.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Returned when an unexpected error occurs during request processing.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
    post:
      tags:
      - LicenseService
      summary: Assign or unassign users to/from the license.
      description: |
        Assign or unassign users to or from the license.  Users assigned may access the service identified by serviceId as contracted with an organization (identified by orgId). Assigned users consume a limited number of seats in a license.
      operationId: LicenseService_ModifySeats
      parameters:
      - name: orgId
        in: path
        description: The id of an license-able organization.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: serviceId
        in: path
        description: A "serviceId" is an arbitrary identifier for a service with limited
          access that may be granted to an organization.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenses_serviceId_body'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alphaModifySeatsResponse'
        "401":
          description: Returned when no valid identity information provided to a protected
            endpoint.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Returned when an unexpected error occurs during request processing.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
      x-codegen-request-body-name: body
  /v1alpha/orgs/{orgId}/licenses/{serviceId}/seats:
    get:
      tags:
      - LicenseService
      summary: Gets user details with filters.
      description: Get details of users who are assigned to the license or available
        to be assigned.
      operationId: LicenseService_GetSeats
      parameters:
      - name: orgId
        in: path
        description: The id of an license-able organization.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: serviceId
        in: path
        description: A "serviceId" is an arbitrary identifier for a service with limited
          access that may be granted to an organization.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: includeUsers
        in: query
        description: "true: include enriched user representation. false: do not include\
          \ (only IDs). Default: true."
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: filter
        in: query
        description: "filter, either assigned or assignable users returned. Default:\
          \ assigned."
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: assigned
          enum:
          - assigned
          - assignable
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1alphaGetSeatsResponse'
        "401":
          description: Returned when no valid identity information provided to a protected
            endpoint.
          content:
            application/json:
              schema:
                type: object
        "403":
          description: Returned when the user does not have permission to access the
            resource.
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Returned when an unexpected error occurs during request processing.
          content:
            application/json:
              schema:
                type: object
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rpcStatus'
components:
  schemas:
    protobufAny:
      type: object
      properties:
        '@type':
          type: string
      additionalProperties:
        type: object
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/protobufAny'
    v1alphaCheckPermissionRequest:
      type: object
      properties:
        subject:
          type: string
        operation:
          type: string
        resourcetype:
          type: string
        resourceid:
          type: string
    v1alphaCheckPermissionResponse:
      type: object
      properties:
        result:
          type: boolean
        description:
          type: string
    v1alphaEntitleOrgResponse:
      title: EntitleOrgResponse is the response when entitling an org
      type: object
    v1alphaGetLicenseResponse:
      type: object
      properties:
        seatsTotal:
          type: integer
          description: Total number of seats assignable.
          format: int32
        seatsAvailable:
          type: integer
          description: Current number of available seats which can be assigned.
          format: int32
    v1alphaGetSeatsResponse:
      type: object
      properties:
        users:
          type: array
          description: "Just user IDs, unless \"includeUsers\" = true."
          items:
            $ref: '#/components/schemas/v1alphaGetSeatsUserRepresentation'
    v1alphaGetSeatsUserRepresentation:
      type: object
      properties:
        displayName:
          type: string
        id:
          type: string
        assigned:
          type: boolean
      description: "we may return more userinfo, this is a starting point."
    v1alphaImportOrgResponse:
      title: ImportOrgResponse
      type: object
      properties:
        importedUsersCount:
          title: Count of how many users were imported
          type: string
          format: uint64
        notImportedUsersCount:
          title: "Count of how many users were not imported, e.g. because they already\
            \ exist"
          type: string
          format: uint64
    v1alphaModifySeatsResponse:
      type: object
    v1alphaSeatFilterType:
      type: string
      default: assigned
      enum:
      - assigned
      - assignable
    EntitleOrgRequest:
      title: EntitleOrgRequest
      type: object
      properties:
        maxSeats:
          type: string
          description: the amount of seats that are granted for this org.
          format: int64
    licenses_serviceId_body:
      type: object
      properties:
        assign:
          type: array
          description: User IDs to assign to the license.
          items:
            type: string
        unassign:
          type: array
          description: User IDs to remove from the license.
          items:
            type: string
      description: ModifySeatsRequest assuming we get the userId etc from the requester
        in the authorization header to validate if an "admin" can actually add licenses.
x-original-swagger-version: "2.0"

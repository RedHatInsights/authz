syntax = "proto3";

// Additional imports go here

package api.v1alpha;

option go_package = "github.com/RedHatInsights/authz/proto/gen/go/core/v1alpha;core";

// Service & message definitions go here

service CheckPermission {
  rpc CheckPermission (CheckPermissionRequest) returns (CheckPermissionResponse) {}
}

message CheckPermissionRequest {
  string subject = 1;
  string operation = 2;
  string resourcetype = 3;
  string resourceid = 4;
}

message CheckPermissionResponse {
  bool result = 1;
  string description = 2;
}

service LicenseService {
  rpc GetLicense (GetLicenseRequest) returns (GetLicenseResponse) {}
  rpc ModifySeats (ModifySeatsRequest) returns (ModifySeatsResponse) {}
  rpc GetSeats (GetSeatsRequest) returns (GetSeatsResponse) {}
  rpc EntitleOrg(EntitleOrgRequest) returns (EntitleOrgResponse) {}
}

message GetLicenseRequest {
  string orgId = 1; // The id of an license-able organization.
  string serviceId = 2; // A "serviceId" is an arbitrary identifier for a service with limited access that may be granted to an organization.
}

message GetLicenseResponse {
  int64 seatsTotal = 1; // Total number of seats assignable.
  int64 seatsAvailable = 2; // Current number of available seats which can be assigned.
}

// ModifySeatsRequest assuming we get the userId etc from the requester in the authorization header to validate if an "admin" can actually add licenses.
message ModifySeatsRequest {
  string orgId = 1; // The id of an license-able organization.
  string serviceId = 2; // A "serviceId" is an arbitrary identifier for a service with limited access that may be granted to an organization.
  repeated string assign = 3; // User IDs to assign to the license.
  repeated string unassign = 4; // User IDs to remove from the license.
}

message ModifySeatsResponse {
}

message GetSeatsRequest {
  string orgId = 1; // The id of an license-able organization.
  string serviceId = 2; // A "serviceId" is an arbitrary identifier for a service with limited access that may be granted to an organization.
  optional bool includeUsers = 3; // true: include enriched user representation. false: do not include (only IDs). Default: true.
  optional SeatFilterType filter = 4; // filter, either assigned or assignable users returned. Default: assigned.
}

enum SeatFilterType {
  assigned = 0;
  assignable = 1;
}

message GetSeatsResponse {
  repeated GetSeatsUserRepresentation users = 1; // Just user IDs, unless "includeUsers" = true.
}

// we may return more userinfo, this is a starting point.
message GetSeatsUserRepresentation {
  string displayName = 1;
  string id = 2;
  bool assigned = 3;
}

// EntitleOrgRequest
message EntitleOrgRequest {
  string orgId = 1; // the ID of an org to entitle
  string serviceId = 2;
  int64 maxSeats = 3; // the amount of seats that are granted for this org.
}

// EntitleOrgResponse is the response when entitling an org
message EntitleOrgResponse {}

service ImportService {
  rpc ImportOrg(ImportOrgRequest) returns (ImportOrgResponse) {}
}

// ImportOrgRequest to trigger an import for an orgs users into spicedb
message ImportOrgRequest {
  string orgId = 1; // the ID of an org to import
}

// ImportOrgResponse
message ImportOrgResponse {
  uint64 importedUsersCount = 1; // Count of how many users were imported
  uint64 notImportedUsersCount = 2; // Count of how many users were not imported, e.g. because they already exist
}

// A generic empty message that you can re-use to avoid defining duplicated
// empty messages in your APIs. A typical example is to use it as the request
// or the response type of an API method. For instance:
//
//     service Foo {
//       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
//     }
//

message Empty {

}

// Health check - No token required , no request or response params, just returns 200 OK if service is running
service HealthCheckService {
  rpc HealthCheck (Empty) returns (Empty) {}
}

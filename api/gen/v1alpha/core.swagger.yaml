swagger: "2.0"
info:
  title: CIAM Authz
  description: This is the CIAM-Authz service based on the OpenAPI 2.0 specification.
  version: version not set
  contact:
    email: ciam-authz@redhat.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: CheckPermission
  - name: LicenseService
  - name: ImportService
  - name: AuthZ
    description: Everything about your AuthZ
    externalDocs:
      description: CIAM AuthZ
      url: http://<TODO>
  - name: user
    description: Operations about user
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1alpha/check:
    post:
      summary: Checks the permission and returns allowed (true) or not allowed (false)
      description: CheckPermission endpoint is used by the clients to determine if the given "subject" has the given permission "Operation" on a given "Resource"
      operationId: CheckPermission_CheckPermission
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCheckPermissionResponse'
          examples:
            application/json:
              description: ""
              result: true
        "401":
          description: Returned when no valid identity information provided to a protected endpoint.
          schema: {}
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "500":
          description: Returned when an unexpected error occurs during request processing.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaCheckPermissionRequest'
      tags:
        - CheckPermission
  /v1alpha/orgs/{orgId}/entitlements/{serviceId}:
    post:
      summary: Entitle an Org access through a seat based license for a service.
      description: |
        Grants a given Org a seat based license to a given service. A maximum number of entitled seats
      operationId: LicenseService_EntitleOrg
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaEntitleOrgResponse'
        "401":
          description: Returned when no valid identity information provided to a protected endpoint.
          schema: {}
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "500":
          description: Returned when an unexpected error occurs during request processing.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: orgId
          description: the ID of an org to entitle
          in: path
          required: true
          type: string
        - name: serviceId
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              maxSeats:
                type: string
                format: int64
                description: the amount of seats that are granted for this org.
            title: EntitleOrgRequest
      tags:
        - LicenseService
  /v1alpha/orgs/{orgId}/import:
    post:
      operationId: ImportService_ImportOrg
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaImportOrgResponse'
        "401":
          description: Returned when no valid identity information provided to a protected endpoint.
          schema: {}
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "500":
          description: Returned when an unexpected error occurs during request processing.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: orgId
          description: the ID of an org to import
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: ImportOrgRequest to trigger an import for an orgs users into spicedb
      tags:
        - ImportService
  /v1alpha/orgs/{orgId}/licenses/{serviceId}:
    get:
      summary: Summarize a license.
      description: |
        Returns information about the license,  including the number of entitled seats (maximum assignable) and the current number of available seats.
      operationId: LicenseService_GetLicense
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetLicenseResponse'
        "401":
          description: Returned when no valid identity information provided to a protected endpoint.
          schema: {}
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "500":
          description: Returned when an unexpected error occurs during request processing.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: orgId
          description: The id of an license-able organization.
          in: path
          required: true
          type: string
        - name: serviceId
          description: A "serviceId" is an arbitrary identifier for a service with limited access that may be granted to an organization.
          in: path
          required: true
          type: string
      tags:
        - LicenseService
    post:
      summary: Assign or unassign users to/from the license.
      description: |
        Assign or unassign users to or from the license.  Users assigned may access the service identified by serviceId as contracted with an organization (identified by orgId). Assigned users consume a limited number of seats in a license.
      operationId: LicenseService_ModifySeats
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaModifySeatsResponse'
        "401":
          description: Returned when no valid identity information provided to a protected endpoint.
          schema: {}
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "500":
          description: Returned when an unexpected error occurs during request processing.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: orgId
          description: The id of an license-able organization.
          in: path
          required: true
          type: string
        - name: serviceId
          description: A "serviceId" is an arbitrary identifier for a service with limited access that may be granted to an organization.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              assign:
                type: array
                items:
                  type: string
                description: User IDs to assign to the license.
              unassign:
                type: array
                items:
                  type: string
                description: User IDs to remove from the license.
            description: ModifySeatsRequest assuming we get the userId etc from the requester in the authorization header to validate if an "admin" can actually add licenses.
      tags:
        - LicenseService
  /v1alpha/orgs/{orgId}/licenses/{serviceId}/seats:
    get:
      summary: Gets user details with filters.
      description: Get details of users who are assigned to the license or available to be assigned.
      operationId: LicenseService_GetSeats
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetSeatsResponse'
        "401":
          description: Returned when no valid identity information provided to a protected endpoint.
          schema: {}
        "403":
          description: Returned when the user does not have permission to access the resource.
          schema: {}
        "500":
          description: Returned when an unexpected error occurs during request processing.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: orgId
          description: The id of an license-able organization.
          in: path
          required: true
          type: string
        - name: serviceId
          description: A "serviceId" is an arbitrary identifier for a service with limited access that may be granted to an organization.
          in: path
          required: true
          type: string
        - name: includeUsers
          description: 'true: include enriched user representation. false: do not include (only IDs). Default: true.'
          in: query
          required: false
          type: boolean
        - name: filter
          description: 'filter, either assigned or assignable users returned. Default: assigned.'
          in: query
          required: false
          type: string
          enum:
            - assigned
            - assignable
          default: assigned
      tags:
        - LicenseService
definitions:
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
  v1alphaCheckPermissionRequest:
    type: object
    properties:
      subject:
        type: string
      operation:
        type: string
      resourcetype:
        type: string
      resourceid:
        type: string
  v1alphaCheckPermissionResponse:
    type: object
    properties:
      result:
        type: boolean
      description:
        type: string
  v1alphaEntitleOrgResponse:
    type: object
    title: EntitleOrgResponse is the response when entitling an org
  v1alphaGetLicenseResponse:
    type: object
    properties:
      seatsTotal:
        type: integer
        format: int32
        description: Total number of seats assignable.
      seatsAvailable:
        type: integer
        format: int32
        description: Current number of available seats which can be assigned.
  v1alphaGetSeatsResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaGetSeatsUserRepresentation'
        description: Just user IDs, unless "includeUsers" = true.
  v1alphaGetSeatsUserRepresentation:
    type: object
    properties:
      displayName:
        type: string
      id:
        type: string
      assigned:
        type: boolean
    description: we may return more userinfo, this is a starting point.
  v1alphaImportOrgResponse:
    type: object
    properties:
      importedUsersCount:
        type: string
        format: uint64
        title: Count of how many users were imported
      notImportedUsersCount:
        type: string
        format: uint64
        title: Count of how many users were not imported, e.g. because they already exist
    title: ImportOrgResponse
  v1alphaModifySeatsResponse:
    type: object
  v1alphaSeatFilterType:
    type: string
    enum:
      - assigned
      - assignable
    default: assigned

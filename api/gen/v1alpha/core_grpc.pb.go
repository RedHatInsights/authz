// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1alpha/core.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckPermissionClient is the client API for CheckPermission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckPermissionClient interface {
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
}

type checkPermissionClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckPermissionClient(cc grpc.ClientConnInterface) CheckPermissionClient {
	return &checkPermissionClient{cc}
}

func (c *checkPermissionClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, "/api.v1alpha.CheckPermission/CheckPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckPermissionServer is the server API for CheckPermission service.
// All implementations should embed UnimplementedCheckPermissionServer
// for forward compatibility
type CheckPermissionServer interface {
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
}

// UnimplementedCheckPermissionServer should be embedded to have forward compatible implementations.
type UnimplementedCheckPermissionServer struct {
}

func (UnimplementedCheckPermissionServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}

// UnsafeCheckPermissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckPermissionServer will
// result in compilation errors.
type UnsafeCheckPermissionServer interface {
	mustEmbedUnimplementedCheckPermissionServer()
}

func RegisterCheckPermissionServer(s grpc.ServiceRegistrar, srv CheckPermissionServer) {
	s.RegisterService(&CheckPermission_ServiceDesc, srv)
}

func _CheckPermission_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckPermissionServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1alpha.CheckPermission/CheckPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckPermissionServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckPermission_ServiceDesc is the grpc.ServiceDesc for CheckPermission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckPermission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha.CheckPermission",
	HandlerType: (*CheckPermissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPermission",
			Handler:    _CheckPermission_CheckPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha/core.proto",
}

// SeatsServiceClient is the client API for SeatsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatsServiceClient interface {
	CreateSeats(ctx context.Context, in *CreateSeatsRequest, opts ...grpc.CallOption) (*CreateSeatsResponse, error)
}

type seatsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatsServiceClient(cc grpc.ClientConnInterface) SeatsServiceClient {
	return &seatsServiceClient{cc}
}

func (c *seatsServiceClient) CreateSeats(ctx context.Context, in *CreateSeatsRequest, opts ...grpc.CallOption) (*CreateSeatsResponse, error) {
	out := new(CreateSeatsResponse)
	err := c.cc.Invoke(ctx, "/api.v1alpha.SeatsService/CreateSeats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatsServiceServer is the server API for SeatsService service.
// All implementations should embed UnimplementedSeatsServiceServer
// for forward compatibility
type SeatsServiceServer interface {
	CreateSeats(context.Context, *CreateSeatsRequest) (*CreateSeatsResponse, error)
}

// UnimplementedSeatsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSeatsServiceServer struct {
}

func (UnimplementedSeatsServiceServer) CreateSeats(context.Context, *CreateSeatsRequest) (*CreateSeatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeats not implemented")
}

// UnsafeSeatsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatsServiceServer will
// result in compilation errors.
type UnsafeSeatsServiceServer interface {
	mustEmbedUnimplementedSeatsServiceServer()
}

func RegisterSeatsServiceServer(s grpc.ServiceRegistrar, srv SeatsServiceServer) {
	s.RegisterService(&SeatsService_ServiceDesc, srv)
}

func _SeatsService_CreateSeats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatsServiceServer).CreateSeats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1alpha.SeatsService/CreateSeats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatsServiceServer).CreateSeats(ctx, req.(*CreateSeatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatsService_ServiceDesc is the grpc.ServiceDesc for SeatsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1alpha.SeatsService",
	HandlerType: (*SeatsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeats",
			Handler:    _SeatsService_CreateSeats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha/core.proto",
}

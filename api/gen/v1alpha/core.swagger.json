{
  "swagger": "2.0",
  "info": {
    "title": "v1alpha/core.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "CheckPermission"
    },
    {
      "name": "SeatsService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1alpha/license/seats": {
      "get": {
        "operationId": "SeatsService_GetSeats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaGetSeatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "description": "tenant to get seats for",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceId",
            "description": "service/productlicense to get seats for",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeUsers",
            "description": "true: include encriched user representation. false: do not include. Default: true.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter",
            "description": "filter, either licensed or unlicensed users returned. Default: licensed. Note: Default values are not supported anymore in proto3, check serverside i guess.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "licensed",
              "unlicensed"
            ],
            "default": "licensed"
          },
          {
            "name": "includeLicenseInfo",
            "description": "include available and max seats of license. Default: True.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "SeatsService"
        ]
      },
      "delete": {
        "operationId": "SeatsService_DeleteSeats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaModifySeatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "CreateSeatsRequest assuming we get the userId etc from the requestor in the authorization header to validate if an \"admin\" can actually add licenses.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaModifySeatsRequest"
            }
          }
        ],
        "tags": [
          "SeatsService"
        ]
      },
      "post": {
        "operationId": "SeatsService_CreateSeats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaModifySeatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "CreateSeatsRequest assuming we get the userId etc from the requestor in the authorization header to validate if an \"admin\" can actually add licenses.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaModifySeatsRequest"
            }
          }
        ],
        "tags": [
          "SeatsService"
        ]
      }
    },
    "/v1alpha/permissions/check": {
      "post": {
        "operationId": "CheckPermission_CheckPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaCheckPermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaCheckPermissionRequest"
            }
          }
        ],
        "tags": [
          "CheckPermission"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alphaCheckPermissionRequest": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "resourcetype": {
          "type": "string"
        },
        "resourceid": {
          "type": "string"
        }
      }
    },
    "v1alphaCheckPermissionResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1alphaGetSeatsCountResponse": {
      "type": "object",
      "properties": {
        "seatsTotal": {
          "type": "integer",
          "format": "int32",
          "description": "total seats."
        },
        "seatsAvailable": {
          "type": "integer",
          "format": "int32",
          "description": "currently available seats."
        }
      },
      "title": "used sint64 after consulting https://protobuf.dev/programming-guides/proto/#scalar"
    },
    "v1alphaGetSeatsResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1alphaGetSeatsUserRepresentation"
          },
          "title": "empty if includeUsers = false, filled if includeUsers=true"
        },
        "licenseInfo": {
          "$ref": "#/definitions/v1alphaGetSeatsCountResponse",
          "title": "returns total and assigned seats for the given tenant \u0026 service, if includeLicenseInfo is true in request"
        }
      }
    },
    "v1alphaGetSeatsUserRepresentation": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isLicenseActive": {
          "type": "boolean"
        }
      },
      "description": "we may return more userinfo, this is a starting point."
    },
    "v1alphaModifySeatsRequest": {
      "type": "object",
      "properties": {
        "tenantId": {
          "type": "string",
          "title": "tenantId of subjects"
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of subjects to add"
        },
        "serviceId": {
          "type": "string",
          "title": "id of service to add subjects to as \"licensed users\""
        }
      },
      "description": "CreateSeatsRequest assuming we get the userId etc from the requestor in the authorization header to validate if an \"admin\" can actually add licenses."
    },
    "v1alphaModifySeatsResponse": {
      "type": "object"
    },
    "v1alphaSeatFilterType": {
      "type": "string",
      "enum": [
        "licensed",
        "unlicensed"
      ],
      "default": "licensed"
    }
  }
}
